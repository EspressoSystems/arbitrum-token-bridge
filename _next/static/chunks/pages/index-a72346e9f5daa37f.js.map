{"version":3,"file":"static/chunks/pages/index-a72346e9f5daa37f.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./src/components/common/atoms/Loader.tsx","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/types/ChainQueryParam.ts","webpack://_N_E/./src/hooks/useArbQueryParams.tsx","webpack://_N_E/./src/pages/index.tsx","webpack://_N_E/./src/util/wagmi/wagmiAdditionalNetworks.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","import { TailSpin } from 'react-loader-spinner'\nimport { BaseProps } from 'react-loader-spinner/dist/type'\n\nexport type LoaderProps = BaseProps & {\n  size: 'small' | 'medium' | 'large'\n}\n\nconst getSizeByLoaderProps = (loaderSize: LoaderProps['size'] | undefined) => {\n  switch (loaderSize) {\n    case 'small':\n      return 16\n\n    case 'medium':\n      return 32\n\n    case 'large':\n      return 44\n  }\n}\n\nexport const Loader = ({ size, color, ...rest }: LoaderProps) => {\n  const sizeInPx = getSizeByLoaderProps(size)\n\n  return <TailSpin height={sizeInPx} width={sizeInPx} color={color} {...rest} />\n}\n","export const TOS_VERSION = 2\n\nexport const TOS_LOCALSTORAGE_KEY = 'arbitrum:bridge:tos-v' + TOS_VERSION\n\nexport const SIDEBAR_OPEN_PREFERENCE_KEY = 'arbitrum:sidebar:opened'\n\nconst SUPPORT_LINK_BASE = 'https://support.arbitrum.io'\n\nexport const GET_HELP_LINK = `${SUPPORT_LINK_BASE}/hc/en-us/requests/new?ticket_form_id=18155929976987`\n\nexport const PORTAL_DOMAIN = 'https://portal.arbitrum.io'\n\nexport const CAREERS_ARBITRUM_LINK = 'https://jobs.arbitrum.io/jobs'\n\nexport const DOCS_DOMAIN = 'https://docs.arbitrum.io'\n\nexport const USDC_LEARN_MORE_LINK = `${DOCS_DOMAIN}/bridge-tokens/concepts/usdc-concept`\n\nexport const FAST_BRIDGE_ARTICLE_LINK = `${SUPPORT_LINK_BASE}/hc/en-us/articles/18213771832987`\n\nexport const TOKEN_APPROVAL_ARTICLE_LINK = `${SUPPORT_LINK_BASE}/hc/en-us/articles/18213893952923`\n\nexport const ETH_BALANCE_ARTICLE_LINK = `${SUPPORT_LINK_BASE}/hc/en-us/articles/18213854684699`\n\nexport const CONFIRMATION_PERIOD_ARTICLE_LINK = `${SUPPORT_LINK_BASE}/hc/en-us/articles/18213843096091`\n\nexport const ORBIT_QUICKSTART_LINK =\n  'https://docs.arbitrum.io/launch-orbit-chain/orbit-quickstart'\n\nexport const CCTP_DOCUMENTATION =\n  'https://www.circle.com/en/cross-chain-transfer-protocol'\n\nexport const MULTICALL_TESTNET_ADDRESS =\n  '0xcA11bde05977b3631167028862bE2a173976CA11'\n\nexport const ETHER_TOKEN_LOGO = '/images/EthereumLogoRound.svg'\n\nexport const ether = { name: 'Ether', symbol: 'ETH', decimals: 18 } as const\n","import { Chain } from 'wagmi'\nimport * as chains from 'wagmi/chains'\n\nimport {\n  ChainId,\n  getCustomChainFromLocalStorageById,\n  getSupportedChainIds\n} from '../util/networks'\nimport * as customChains from '../util/wagmi/wagmiAdditionalNetworks'\nimport { getOrbitChains, orbitChains } from '../util/orbitChainsList'\nimport { chainToWagmiChain } from '../util/wagmi/wagmiAdditionalNetworks'\n\nconst chainQueryParams = [\n  'ethereum',\n  'sepolia',\n  'arbitrum-one',\n  'arbitrum-nova',\n  'arbitrum-sepolia',\n  'custom-localhost',\n  'arbitrum-localhost',\n  'l3-localhost'\n] as const\n\nexport type ChainKeyQueryParam = (typeof chainQueryParams)[number]\nexport type ChainQueryParam = ChainKeyQueryParam | ChainId | number | string\n\nexport function isValidChainQueryParam(value: string | number): boolean {\n  if (typeof value === 'string') {\n    const isValidCoreChainSlug = (\n      chainQueryParams as readonly string[]\n    ).includes(value)\n    const isValidOrbitChainSlug = getOrbitChains().some(\n      chain => chain.slug === value\n    )\n    return isValidCoreChainSlug || isValidOrbitChainSlug\n  }\n\n  const supportedNetworkIds = getSupportedChainIds({ includeTestnets: true })\n  return supportedNetworkIds.includes(value)\n}\n\nexport function getChainQueryParamForChain(chainId: ChainId): ChainQueryParam {\n  switch (chainId) {\n    case ChainId.Ethereum:\n      return 'ethereum'\n\n    case ChainId.ArbitrumOne:\n      return 'arbitrum-one'\n\n    case ChainId.ArbitrumNova:\n      return 'arbitrum-nova'\n\n    case ChainId.Sepolia:\n      return 'sepolia'\n\n    case ChainId.ArbitrumSepolia:\n      return 'arbitrum-sepolia'\n\n    case ChainId.Local:\n      return 'custom-localhost'\n\n    case ChainId.ArbitrumLocal:\n      return 'arbitrum-localhost'\n\n    case ChainId.L3Local:\n      return 'l3-localhost'\n\n    default:\n      const customChain = getCustomChainFromLocalStorageById(chainId)\n\n      const orbitChain = orbitChains[chainId]\n\n      if (customChain) {\n        return customChain.chainId\n      }\n\n      if (orbitChain) {\n        return orbitChain.slug ?? orbitChain.chainId\n      }\n\n      throw new Error(\n        `[getChainQueryParamForChain] Unexpected chain id: ${chainId}`\n      )\n  }\n}\n\nexport function getChainForChainKeyQueryParam(\n  chainKeyQueryParam: ChainKeyQueryParam\n): Chain {\n  switch (chainKeyQueryParam) {\n    case 'ethereum':\n      return chains.mainnet\n\n    case 'sepolia':\n      return chains.sepolia\n\n    case 'arbitrum-one':\n      return chains.arbitrum\n\n    case 'arbitrum-nova':\n      return customChains.arbitrumNova\n\n    case 'arbitrum-sepolia':\n      return customChains.arbitrumSepolia\n\n    case 'custom-localhost':\n      return customChains.localL1Network\n\n    case 'arbitrum-localhost':\n      return customChains.localL2Network\n\n    case 'l3-localhost':\n      return customChains.localL3Network\n\n    default:\n      const orbitChain = getOrbitChains().find(\n        chain =>\n          chain.slug === chainKeyQueryParam ??\n          chain.chainId === Number(chainKeyQueryParam)\n      )\n\n      if (orbitChain) {\n        return chainToWagmiChain(orbitChain)\n      }\n\n      throw new Error(\n        `[getChainForChainKeyQueryParam] Unexpected chainKeyQueryParam: ${chainKeyQueryParam}`\n      )\n  }\n}\n","/*\n\n  This hook is an abstraction over `useQueryParams` hooks' library\n  - It contains all the browser query params we use / intend to use in our application\n  - Provides methods to listen to, and update all these query params\n  - If we introduce a new queryParam for our bridge in the future, define it here and it will be accessible throughout the app :)\n\n  - Example - to get the value of `?amount=` in browser, simply use\n    `const [{ amount }] = useArbQueryParams()`\n\n  - Example - to set the value of `?amount=` in browser, simply use\n    `const [, setQueryParams] = useArbQueryParams()`\n    `setQueryParams(newAmount)`\n\n*/\nimport React from 'react'\nimport NextAdapterPages from 'next-query-params/pages'\nimport queryString from 'query-string'\nimport {\n  BooleanParam,\n  QueryParamProvider,\n  StringParam,\n  decodeNumber,\n  decodeString,\n  useQueryParams,\n  withDefault\n} from 'use-query-params'\n\nimport {\n  ChainKeyQueryParam,\n  getChainForChainKeyQueryParam,\n  getChainQueryParamForChain,\n  isValidChainQueryParam\n} from '../types/ChainQueryParam'\nimport { ChainId } from '../util/networks'\n\nexport enum AmountQueryParamEnum {\n  MAX = 'max'\n}\n\nexport const useArbQueryParams = () => {\n  /*\n    returns [\n      queryParams (getter for all query state variables),\n      setQueryParams (setter for all query state variables)\n    ]\n  */\n  return useQueryParams({\n    sourceChain: ChainParam,\n    destinationChain: ChainParam,\n    amount: withDefault(AmountQueryParam, ''), // amount which is filled in Transfer panel\n    token: StringParam, // import a new token using a Dialog Box\n    settingsOpen: withDefault(BooleanParam, false)\n  })\n}\n\nconst isMax = (amount: string | undefined) =>\n  amount?.toLowerCase() === AmountQueryParamEnum.MAX\n\n/**\n * Sanitise amount value\n * @param amount - transfer amount value from the input field or from the URL\n * @returns sanitised value\n */\nconst sanitizeAmountQueryParam = (amount: string) => {\n  // no need to process empty string\n  if (amount.length === 0) {\n    return amount\n  }\n\n  const parsedAmount = amount.replace(/[,]/g, '.').toLowerCase()\n\n  // add 0 to values starting with .\n  if (parsedAmount.startsWith('.')) {\n    return `0${parsedAmount}`\n  }\n\n  // to catch strings like `amount=asdf` from the URL\n  if (isNaN(Number(parsedAmount))) {\n    // return original string if the string is `max` (case-insensitive)\n    // it doesn't show on the input[type=number] field because it isn't in the allowed chars\n    return isMax(parsedAmount) ? parsedAmount : ''\n  }\n\n  // to reach here they must be a number\n  // check for negative sign at first char\n  if (parsedAmount.startsWith('-')) {\n    return String(Math.abs(Number(parsedAmount)))\n  }\n\n  // replace leading zeros and spaces\n  // this regex finds 1 or more 0s before any digits including 0\n  // but the digits are not captured into the result string\n  return parsedAmount.replace(/(^0+(?=\\d))| /g, '')\n}\n\n// Our custom query param type for Amount field - will be parsed and returned as a string,\n// but we need to make sure that only valid numeric-string values are considered, else return '0'\n// Defined here so that components can directly rely on this for clean amount values and not rewrite parsing logic everywhere it gets used\nexport const AmountQueryParam = {\n  // type of amount is always string | undefined coming from the input element onChange event `e.target.value`\n  encode: (amount: string | undefined = '') => sanitizeAmountQueryParam(amount),\n  decode: (amount: string | (string | null)[] | null | undefined) => {\n    // toString() casts the potential string array into a string\n    const amountStr = amount?.toString() ?? ''\n    return sanitizeAmountQueryParam(amountStr)\n  }\n}\n\n// Parse chainId to ChainQueryParam or ChainId for orbit chain\nexport function encodeChainQueryParam(\n  chainId: number | null | undefined\n): string | undefined {\n  if (!chainId) {\n    return undefined\n  }\n\n  try {\n    const chain = getChainQueryParamForChain(chainId)\n    return chain.toString()\n  } catch (e) {\n    return undefined\n  }\n}\n\nfunction isValidNumber(value: number | null | undefined): value is number {\n  if (typeof value === 'undefined' || value === null) {\n    return false\n  }\n\n  return !Number.isNaN(value)\n}\n\n// Parse ChainQueryParam/ChainId to ChainId\n// URL accept both chainId and chainQueryParam (string)\nexport function decodeChainQueryParam(\n  value: string | (string | null)[] | null | undefined\n  // ChainId type doesn't include custom orbit chain, we need to add number type\n): ChainId | number | undefined {\n  const valueString = decodeString(value)\n  if (!valueString) {\n    return undefined\n  }\n\n  const valueNumber = decodeNumber(value)\n  if (\n    isValidNumber(valueNumber) &&\n    isValidChainQueryParam(valueNumber as ChainId)\n  ) {\n    return valueNumber\n  }\n\n  if (isValidChainQueryParam(valueString)) {\n    return getChainForChainKeyQueryParam(valueString as ChainKeyQueryParam).id\n  }\n\n  return undefined\n}\n\nexport const ChainParam = {\n  encode: encodeChainQueryParam,\n  decode: decodeChainQueryParam\n}\n\nexport function ArbQueryParamProvider({\n  children\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <QueryParamProvider\n      adapter={NextAdapterPages}\n      options={{\n        searchStringToObject: queryString.parse,\n        objectToSearchString: queryString.stringify,\n        updateType: 'replaceIn', // replace just a single parameter when updating query-state, leaving the rest as is\n        removeDefaultsFromUrl: true\n      }}\n    >\n      {children}\n    </QueryParamProvider>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { GetServerSidePropsContext, GetServerSidePropsResult } from 'next'\nimport dynamic from 'next/dynamic'\nimport { registerCustomArbitrumNetwork } from '@arbitrum/sdk'\n\nimport { Loader } from '../components/common/atoms/Loader'\nimport {\n  getCustomChainsFromLocalStorage,\n  mapCustomChainToNetworkData\n} from '../util/networks'\nimport { getOrbitChains } from '../util/orbitChainsList'\nimport { sanitizeQueryParams } from '../hooks/useNetworks'\nimport {\n  decodeChainQueryParam,\n  encodeChainQueryParam\n} from '../hooks/useArbQueryParams'\n\nconst App = dynamic(() => import('../components/App/App'), {\n  ssr: false,\n  loading: () => (\n    <>\n      <div className=\"h-12 w-full lg:h-16\" />\n      <div className=\"fixed inset-0 m-auto h-[44px] w-[44px]\">\n        <Loader size=\"large\" color=\"white\" />\n      </div>\n    </>\n  )\n})\n\nfunction getDestinationWithSanitizedQueryParams(\n  sanitized: {\n    sourceChainId: number\n    destinationChainId: number\n  },\n  query: GetServerSidePropsContext['query']\n) {\n  const params = new URLSearchParams()\n\n  for (const key in query) {\n    // don't copy \"sourceChain\" and \"destinationChain\" query params\n    if (key === 'sourceChain' || key === 'destinationChain') {\n      continue\n    }\n\n    const value = query[key]\n\n    // copy everything else\n    if (typeof value === 'string') {\n      params.set(key, value)\n    }\n  }\n\n  const encodedSource = encodeChainQueryParam(sanitized.sourceChainId)\n  const encodedDestination = encodeChainQueryParam(sanitized.destinationChainId)\n\n  if (encodedSource) {\n    params.set('sourceChain', encodedSource)\n\n    if (encodedDestination) {\n      params.set('destinationChain', encodedDestination)\n    }\n  }\n\n  return `/?${params.toString()}`\n}\n\nfunction addOrbitChainsToArbitrumSDK() {\n  ;[...getOrbitChains(), ...getCustomChainsFromLocalStorage()].forEach(\n    chain => {\n      try {\n        registerCustomArbitrumNetwork(chain)\n        mapCustomChainToNetworkData(chain)\n      } catch (_) {\n        // already added\n      }\n    }\n  )\n}\n\n// export function getServerSideProps({\n//   query\n// }: GetServerSidePropsContext): GetServerSidePropsResult<Record<string, never>> {\n//   const sourceChainId = decodeChainQueryParam(query.sourceChain)\n//   const destinationChainId = decodeChainQueryParam(query.destinationChain)\n\n//   // If both sourceChain and destinationChain are not present, let the client sync with Metamask\n//   if (!sourceChainId && !destinationChainId) {\n//     return {\n//       props: {}\n//     }\n//   }\n\n//   // it's necessary to call this before sanitization to make sure all chains are registered\n//   addOrbitChainsToArbitrumSDK()\n\n//   // sanitize the query params\n//   const sanitized = sanitizeQueryParams({ sourceChainId, destinationChainId })\n\n//   // if the sanitized query params are different from the initial values, redirect to the url with sanitized query params\n//   if (\n//     sourceChainId !== sanitized.sourceChainId ||\n//     destinationChainId !== sanitized.destinationChainId\n//   ) {\n//     console.log(`[getServerSideProps] sanitizing query params`)\n//     console.log(\n//       `[getServerSideProps]     sourceChain=${sourceChainId}&destinationChain=${destinationChainId} (before)`\n//     )\n//     console.log(\n//       `[getServerSideProps]     sourceChain=${sanitized.sourceChainId}&destinationChain=${sanitized.destinationChainId} (after)`\n//     )\n//     return {\n//       redirect: {\n//         permanent: false,\n//         destination: getDestinationWithSanitizedQueryParams(sanitized, query)\n//       }\n//     }\n//   }\n\n//   return {\n//     props: {}\n//   }\n// }\n\nexport default function Index() {\n  useEffect(() => {\n    addOrbitChainsToArbitrumSDK()\n  }, [])\n\n  return <App />\n}\n","import { Chain, sepolia as sepoliaDefault } from 'wagmi'\n\nimport { ether } from '../../constants'\nimport { ChainId, ChainWithRpcUrl, explorerUrls, rpcURLs } from '../networks'\nimport { getBridgeUiConfigForChain } from '../bridgeUiConfig'\n\nexport function chainToWagmiChain(chain: ChainWithRpcUrl): Chain {\n  const { nativeTokenData } = getBridgeUiConfigForChain(chain.chainId)\n\n  return {\n    id: chain.chainId,\n    name: chain.name,\n    network: chain.name.toLowerCase().split(' ').join('-'),\n    nativeCurrency: nativeTokenData ?? ether,\n    rpcUrls: {\n      default: {\n        http: [chain.rpcUrl]\n      },\n      public: {\n        http: [chain.rpcUrl]\n      }\n    },\n    blockExplorers: {\n      default: {\n        name: 'Block Explorer',\n        url: chain.explorerUrl\n      }\n    }\n  }\n}\n\nexport const sepolia: Chain = {\n  ...sepoliaDefault,\n  rpcUrls: {\n    ...sepoliaDefault.rpcUrls,\n    // override the default public RPC with the Infura RPC\n    // public RPCs are getting rate limited\n    default: {\n      http: [rpcURLs[ChainId.Sepolia]!]\n    }\n  }\n}\n\nexport const holesky: Chain = {\n  id: ChainId.Holesky,\n  name: 'Holesky',\n  network: 'holesky',\n  nativeCurrency: ether,\n  rpcUrls: {\n    default: {\n      http: [rpcURLs[ChainId.Holesky]!]\n    },\n    public: {\n      http: [rpcURLs[ChainId.Holesky]!]\n    }\n  },\n  blockExplorers: {\n    etherscan: {\n      name: 'Etherscan',\n      url: explorerUrls[ChainId.Holesky]!\n    },\n    default: { name: 'Etherscan', url: explorerUrls[ChainId.Holesky]! }\n  }\n}\n\nexport const arbitrumSepolia: Chain = {\n  id: ChainId.ArbitrumSepolia,\n  name: 'Arbitrum Sepolia',\n  network: 'arbitrum-sepolia',\n  nativeCurrency: ether,\n  rpcUrls: {\n    default: {\n      http: [rpcURLs[ChainId.ArbitrumSepolia]!]\n    },\n    public: {\n      http: [rpcURLs[ChainId.ArbitrumSepolia]!]\n    }\n  },\n  blockExplorers: {\n    etherscan: {\n      name: 'Arbiscan',\n      url: explorerUrls[ChainId.ArbitrumSepolia]!\n    },\n    default: { name: 'Arbiscan', url: explorerUrls[ChainId.ArbitrumSepolia]! }\n  }\n}\n\nexport const arbitrumNova: Chain = {\n  id: ChainId.ArbitrumNova,\n  name: 'Arbitrum Nova',\n  network: 'arbitrum-nova',\n  nativeCurrency: ether,\n  rpcUrls: {\n    default: {\n      http: [rpcURLs[ChainId.ArbitrumNova]!]\n    },\n    public: {\n      http: [rpcURLs[ChainId.ArbitrumNova]!]\n    }\n  },\n  blockExplorers: {\n    etherscan: { name: 'Arbiscan', url: 'https://nova.arbiscan.io' },\n    default: { name: 'Arbiscan', url: 'https://nova.arbiscan.io' }\n  }\n}\n\n/**\n * For e2e testing\n */\nexport const localL1Network: Chain = {\n  id: ChainId.Local,\n  name: 'Ethereum Local',\n  network: 'custom-localhost',\n  nativeCurrency: ether,\n  rpcUrls: {\n    default: {\n      http: [rpcURLs[ChainId.Local]!]\n    },\n    public: {\n      http: [rpcURLs[ChainId.Local]!]\n    }\n  },\n  blockExplorers: {\n    default: { name: 'Blockscout', url: '' }\n  }\n}\n\n/**\n * For e2e testing\n */\nexport const localL2Network: Chain = {\n  id: ChainId.ArbitrumLocal,\n  name: 'Arbitrum Local',\n  network: 'arbitrum-localhost',\n  nativeCurrency: ether,\n  rpcUrls: {\n    default: {\n      http: [rpcURLs[ChainId.ArbitrumLocal]!]\n    },\n    public: {\n      http: [rpcURLs[ChainId.ArbitrumLocal]!]\n    }\n  },\n  blockExplorers: {\n    default: { name: 'Blockscout', url: 'https://etherscan.io' }\n  }\n}\n\n/**\n * For e2e testing\n */\nexport const localL3Network: Chain = {\n  id: ChainId.L3Local,\n  name: 'L3 Local',\n  network: 'l3-localhost',\n  nativeCurrency: ether,\n  rpcUrls: {\n    default: {\n      http: [rpcURLs[ChainId.L3Local]!]\n    },\n    public: {\n      http: [rpcURLs[ChainId.L3Local]!]\n    }\n  },\n  blockExplorers: {\n    default: { name: 'Blockscout', url: 'https://etherscan.io' }\n  }\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","getSizeByLoaderProps","loaderSize","Loader","size","color","rest","param","sizeInPx","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","TailSpin","height","width","TOS_LOCALSTORAGE_KEY","SUPPORT_LINK_BASE","GET_HELP_LINK","concat","DOCS_DOMAIN","USDC_LEARN_MORE_LINK","TOKEN_APPROVAL_ARTICLE_LINK","ETH_BALANCE_ARTICLE_LINK","CONFIRMATION_PERIOD_ARTICLE_LINK","ORBIT_QUICKSTART_LINK","CCTP_DOCUMENTATION","ETHER_TOKEN_LOGO","ether","name","symbol","decimals","chainQueryParams","isValidChainQueryParam","value","isValidCoreChainSlug","includes","isValidOrbitChainSlug","getOrbitChains","some","chain","slug","supportedNetworkIds","getSupportedChainIds","includeTestnets","AmountQueryParamEnum","useArbQueryParams","useQueryParams","sourceChain","ChainParam","destinationChain","amount","withDefault","AmountQueryParam","token","StringParam","settingsOpen","BooleanParam","isMax","toLowerCase","sanitizeAmountQueryParam","length","parsedAmount","replace","startsWith","isNaN","Number","String","Math","abs","encode","decode","toString","chainId","ChainId","Ethereum","ArbitrumOne","ArbitrumNova","Sepolia","ArbitrumSepolia","Local","ArbitrumLocal","L3Local","customChain","getCustomChainFromLocalStorageById","orbitChain","orbitChains","e","valueString","decodeString","valueNumber","decodeNumber","getChainForChainKeyQueryParam","chainKeyQueryParam","chains","customChains","find","chainToWagmiChain","id","ArbQueryParamProvider","children","jsx_runtime","QueryParamProvider","adapter","NextAdapterPages","options","searchStringToObject","queryString","parse","objectToSearchString","stringify","updateType","removeDefaultsFromUrl","App","dynamic","Promise","all","then","bind","ssr","loading","jsxs","Fragment","div","className","Index","useEffect","getCustomChainsFromLocalStorage","forEach","registerCustomArbitrumNetwork","mapCustomChainToNetworkData","_","nativeTokenData","getBridgeUiConfigForChain","network","split","join","nativeCurrency","rpcUrls","default","http","rpcUrl","public","blockExplorers","url","explorerUrl","sepolia","sepoliaDefault","rpcURLs","holesky","Holesky","etherscan","explorerUrls","arbitrumSepolia","arbitrumNova","localL1Network","localL2Network","localL3Network"],"sourceRoot":""}